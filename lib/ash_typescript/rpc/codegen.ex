defmodule AshTypescript.Rpc.Codegen do
  @moduledoc """
  Generates TypeScript code for interacting with Ash resources via Rpc.
  """
  import AshTypescript.Codegen
  import AshTypescript.Filter
  import AshTypescript.Helpers

  def generate_typescript_types(otp_app, opts \\ []) do
    endpoint_process = Keyword.get(opts, :run_endpoint, "/rpc/run")
    endpoint_validate = Keyword.get(opts, :validate_endpoint, "/rpc/validate")

    resources_and_actions = get_rpc_resources_and_actions(otp_app)

    generate_full_typescript(
      resources_and_actions,
      endpoint_process,
      endpoint_validate,
      otp_app
    )
  end

  defp get_rpc_resources_and_actions(otp_app) do
    otp_app
    |> Ash.Info.domains()
    |> Enum.flat_map(fn domain ->
      # Get Rpc configuration from the domain
      rpc_config = AshTypescript.Rpc.Info.rpc(domain)

      Enum.flat_map(rpc_config, fn %{resource: resource, rpc_actions: rpc_actions} ->
        Enum.map(rpc_actions, fn rpc_action ->
          action = Ash.Resource.Info.action(resource, rpc_action.action)
          {resource, action, rpc_action}
        end)
      end)
    end)
  end

  defp generate_full_typescript(
         rpc_resources_and_actions,
         endpoint_process,
         endpoint_validate,
         otp_app
       ) do
    # Extract only the Rpc resources
    rpc_resources =
      otp_app
      |> Ash.Info.domains()
      |> Enum.flat_map(fn domain ->
        AshTypescript.Rpc.Info.rpc(domain)
        |> Enum.map(fn %{resource: r} -> r end)
      end)

    actions =
      otp_app
      |> Ash.Info.domains()
      |> Enum.flat_map(fn domain ->
        AshTypescript.Rpc.Info.rpc(domain)
        |> Enum.flat_map(fn %{resource: resource, rpc_actions: rpc_actions} ->
          Enum.map(rpc_actions, fn %{action: action} ->
            Ash.Resource.Info.action(resource, action)
          end)
        end)
      end)

    """
    // Generated by AshTypescript
    // Do not edit this file manually

    #{generate_ash_type_aliases(rpc_resources, actions)}

    #{generate_all_schemas_for_resources(rpc_resources, rpc_resources)}

    #{generate_filter_types(rpc_resources, rpc_resources)}

    #{generate_utility_types()}

    #{generate_rpc_functions(rpc_resources_and_actions, endpoint_process, endpoint_validate, otp_app, rpc_resources)}
    """
  end

  defp generate_utility_types do
    """
    // Utility Types
    type ResourceBase = {
      fields: Record<string, any>;
      relationships: Record<string, any>;
      complexCalculations: Record<string, any>;
      __complexCalculationsInternal: Record<string, any>;
    };

    type FieldSelection<Resource extends ResourceBase> =
      | keyof Resource["fields"]
      | {
          [K in keyof Resource["relationships"]]?: FieldSelection<
            Resource["relationships"][K] extends { __resource: infer R }
            ? R extends ResourceBase ? R : never : never
          >[];
        };

    // Helper to extract string fields from field selection
    type ExtractStringFields<Fields> = Fields extends readonly (infer U)[]
      ? U extends string
        ? U
        : never
      : never;

    // Helper to extract relationship objects from field selection
    type ExtractRelationshipObjects<Fields> = Fields extends readonly (infer U)[]
      ? U extends Record<string, any>
        ? U
        : never
      : never;

    // Infer picked fields from string field names
    type InferPickedFields<
      Resource extends ResourceBase,
      StringFields
    > = Pick<Resource["fields"], Extract<StringFields, keyof Resource["fields"]>>

    // Simplified relationship inference that works with literal arrays
    type InferRelationships<
      RelationshipsObject extends Record<string, any>,
      AllRelationships extends Record<string, any>
    > = {
      [K in keyof RelationshipsObject]-?: K extends keyof AllRelationships
        ? AllRelationships[K] extends { __resource: infer Res extends ResourceBase }
          ? AllRelationships[K] extends { __array: true }
            ? Array<InferResourceResult<Res, RelationshipsObject[K], {}>>
            : InferResourceResult<Res, RelationshipsObject[K], {}>
          : never
        : never;
    };

    // Main result type that combines picked fields, relationships, and calculations
    type InferResourceResult<
      Resource extends ResourceBase,
      SelectedFields extends FieldSelection<Resource>[],
      CalculationsConfig extends Record<string, any>
    > =
      InferPickedFields<Resource, ExtractStringFields<SelectedFields>> &
      InferRelationships<ExtractRelationshipObjects<SelectedFields>, Resource["relationships"]> &
      InferCalculations<CalculationsConfig, Resource["__complexCalculationsInternal"]>;

    // Infer calculation results
    type InferCalculations<
      CalculationsConfig extends Record<string, any>,
      InternalCalculations extends Record<string, any>
    > = {
      [K in keyof CalculationsConfig]?: K extends keyof InternalCalculations
        ? InternalCalculations[K] extends { __returnType: infer ReturnType; fields: infer Fields }
          ? ReturnType extends ResourceBase
              ? InferResourceResult<ReturnType, CalculationsConfig[K]["fields"], {}>
              : ReturnType extends Record<string, any>
                ? Pick<ReturnType, Extract<ExtractStringFields<CalculationsConfig[K]["fields"]>, keyof ReturnType>>
                : ReturnType
          : never
        : never;
    };
    """
  end

  defp generate_rpc_functions(
         resources_and_actions,
         endpoint_process,
         endpoint_validate,
         otp_app,
         resources
       ) do
    # Generate relationship types for all resources
    relationship_types =
      resources
      |> Enum.map(&generate_relationship_types(&1, resources))
      |> Enum.join("\n\n")

    # Generate functions for each Rpc action
    rpc_functions =
      resources_and_actions
      |> Enum.map(
        &generate_rpc_function(
          &1,
          resources_and_actions,
          endpoint_process,
          endpoint_validate,
          otp_app
        )
      )
      |> Enum.join("\n\n")

    """
    #{relationship_types}

    #{rpc_functions}
    """
  end

  defp generate_relationship_types(resource, all_resources) do
    resource_name = resource |> Module.split() |> List.last()

    has_single_relationship? =
      all_resources
      |> Enum.reject(&(&1 == resource))
      |> Enum.any?(fn res ->
        relationships = Ash.Resource.Info.public_relationships(res)

        Enum.any?(
          relationships,
          &(&1.type in [:belongs_to, :has_one] and &1.destination == resource)
        )
      end)

    # Generate single relationship type
    single_rel =
      if has_single_relationship? do
        """
          type #{resource_name}Relationship = {
            __resource: #{resource_name}ResourceSchema;
            fields: FieldSelection<#{resource_name}ResourceSchema>[];
          };
        """
      else
        ""
      end

    has_many_relationship? =
      all_resources
      |> Enum.reject(&(&1 == resource))
      |> Enum.any?(fn res ->
        relationships = Ash.Resource.Info.public_relationships(res)

        Enum.any?(
          relationships,
          &(&1.type in [:has_many, :many_to_many] and &1.destination == resource)
        )
      end)

    # Generate array relationship type
    array_rel =
      if has_many_relationship? do
        """
        type #{resource_name}ArrayRelationship = {
          __array: true;
          __resource: #{resource_name}ResourceSchema;
          fields: FieldSelection<#{resource_name}ResourceSchema>[];
        };
        """
      else
        ""
      end

    if has_single_relationship? or has_many_relationship? do
      Enum.join([single_rel, array_rel], "\n")
    else
      ""
    end
  end

  defp generate_rpc_function(
         {resource, action, rpc_action},
         _resources_and_actions,
         endpoint_process,
         endpoint_validate,
         _otp_app
       ) do
    # Convert Rpc action name to camelCase function name (e.g., read_todo -> readTodos)
    rpc_action_name = to_string(rpc_action.name)

    # Generate config type
    config_type = generate_config_type(resource, action, rpc_action_name)

    # Generate result inference type
    result_type = generate_result_type(resource, action, rpc_action_name)

    # Generate payload builder
    payload_builder = generate_payload_builder(resource, rpc_action, action, rpc_action_name)

    # Generate Rpc function
    rpc_function =
      generate_rpc_execution_function(rpc_action, action, rpc_action_name, endpoint_process)

    # Generate validation function (for create, update, destroy actions only)
    validation_function =
      generate_validation_function(resource, rpc_action, action, rpc_action_name, endpoint_validate)

    functions_section =
      if validation_function == "" do
        rpc_function
      else
        """
        #{rpc_function}

        #{validation_function}
        """
      end

    """
    #{config_type}

    #{result_type}

    #{payload_builder}

    #{functions_section}
    """
  end

  defp generate_config_type(resource, action, rpc_action_name) do
    resource_name = resource |> Module.split() |> List.last()
    _function_name = snake_to_camel_case(rpc_action_name)
    config_name = "#{snake_to_pascal_case(rpc_action_name)}Config"

    # Add tenant field if resource requires tenant
    tenant_field = 
      if AshTypescript.Rpc.requires_tenant_parameter?(resource) do
        ["  tenant: string;"]
      else
        []
      end

    # Base config fields - use formatted field names
    formatted_fields_name = AshTypescript.FieldFormatter.format_field("fields", AshTypescript.Rpc.output_field_formatter())
    formatted_calculations_name = AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())
    
    fields_field = [
      "  #{formatted_fields_name}: FieldSelection<#{resource_name}ResourceSchema>[];"
    ]

    # Add calculations field
    calculations_field = [
      "  #{formatted_calculations_name}?: Partial<#{resource_name}ResourceSchema[\"complexCalculations\"]>;"
    ]

    # Add input fields based on action type
    input_fields =
      case action.type do
        :read ->
          filters =
            if action.get? do
              []
            else
              [
                "  filter?: #{resource_name}FilterInput;"
              ]
            end

          pagination_and_sort = [
            "  sort?: string;",
            "  page?: {",
            "    limit?: number;",
            "    offset?: number;",
            "  };"
          ]

          filters ++ pagination_and_sort

        :create ->
          accepts = Ash.Resource.Info.action(resource, action.name).accept || []
          arguments = action.arguments

          if accepts != [] || arguments != [] do
            ["  input: {"] ++
              Enum.map(accepts, fn field_name ->
                attr = Ash.Resource.Info.attribute(resource, field_name)
                optional = attr.allow_nil? || attr.default != nil
                base_type = get_ts_type(attr)
                field_type = if attr.allow_nil?, do: "#{base_type} | null", else: base_type
                formatted_field_name = AshTypescript.FieldFormatter.format_field(field_name, AshTypescript.Rpc.output_field_formatter())

                "    #{formatted_field_name}#{if optional, do: "?", else: ""}: #{field_type};"
              end) ++
              Enum.map(arguments, fn arg ->
                optional = arg.allow_nil? || arg.default != nil
                formatted_arg_name = AshTypescript.FieldFormatter.format_field(arg.name, AshTypescript.Rpc.output_field_formatter())

                "    #{formatted_arg_name}#{if optional, do: "?", else: ""}: #{get_ts_type(arg)};"
              end) ++
              ["  };"]
          else
            []
          end

        action_type when action_type in [:update, :destroy] ->
          primary_key_attrs = Ash.Resource.Info.primary_key(resource)

          primary_key_field =
            if Enum.count(primary_key_attrs) == 1 do
              attr_name = Enum.at(primary_key_attrs, 0)
              attr = Ash.Resource.Info.attribute(resource, attr_name)
              ["  primaryKey: #{get_ts_type(attr)};"]
            else
              ["  primaryKey: {"] ++
                Enum.map(primary_key_attrs, fn attr_name ->
                  attr = Ash.Resource.Info.attribute(resource, attr_name)
                  "    #{attr.name}: #{get_ts_type(attr)};"
                end) ++
                ["  };"]
            end

          input_fields =
            if action.accept != [] || action.arguments != [] do
              ["  input: {"] ++
                Enum.map(action.accept, fn field_name ->
                  attr = Ash.Resource.Info.attribute(resource, field_name)
                  formatted_field_name = AshTypescript.FieldFormatter.format_field(field_name, AshTypescript.Rpc.output_field_formatter())

                  if attr.allow_nil? do
                    "    #{formatted_field_name}?: #{get_ts_type(attr)} | null;"
                  else
                    "    #{formatted_field_name}: #{get_ts_type(attr)};"
                  end
                end) ++
                Enum.map(action.arguments, fn arg ->
                  optional = arg.allow_nil? || arg.default != nil
                  formatted_arg_name = AshTypescript.FieldFormatter.format_field(arg.name, AshTypescript.Rpc.output_field_formatter())

                  "    #{formatted_arg_name}#{if optional, do: "?", else: ""}: #{get_ts_type(arg)};"
                end) ++
                ["  };"]
            else
              []
            end

          primary_key_field ++ input_fields

        :action ->
          arguments = action.arguments

          if arguments != [] do
            ["  input: {"] ++
              Enum.map(arguments, fn arg ->
                optional = arg.allow_nil? || arg.default != nil
                formatted_arg_name = AshTypescript.FieldFormatter.format_field(arg.name, AshTypescript.Rpc.output_field_formatter())

                "    #{formatted_arg_name}#{if optional, do: "?", else: ""}: #{get_ts_type(arg)};"
              end) ++
              ["  };"]
          else
            []
          end
      end

    all_fields =
      if action.type in [:read, :create, :update] do
        tenant_field ++ input_fields ++ fields_field ++ calculations_field
      else
        tenant_field ++ input_fields
      end

    """
    export type #{config_name} = {
    #{Enum.join(all_fields, "\n")}
    };
    """
  end

  defp generate_result_type(resource, action, rpc_action_name) do
    resource_name = resource |> Module.split() |> List.last()
    _function_name = snake_to_camel_case(rpc_action_name)

    rpc_action_name_pascal = snake_to_pascal_case(rpc_action_name)

    case action.type do
      :read when action.get? ->
        """
        type Infer#{rpc_action_name_pascal}Result<Config extends #{rpc_action_name_pascal}Config> =
          InferResourceResult<#{resource_name}ResourceSchema, Config["fields"], Config["calculations"]> | null;
        """

      :read ->
        """
        type Infer#{rpc_action_name_pascal}Result<Config extends #{rpc_action_name_pascal}Config> =
          Array<InferResourceResult<#{resource_name}ResourceSchema, Config["fields"], Config["calculations"]>>;
        """

      action_type when action_type in [:create, :update] ->
        """
        type Infer#{rpc_action_name_pascal}Result<Config extends #{rpc_action_name_pascal}Config> =
          InferResourceResult<#{resource_name}ResourceSchema, Config["fields"], Config["calculations"]>;
        """

      :destroy ->
        """
        type Infer#{rpc_action_name_pascal}Result = void;
        """

      action_type when action_type in [:action, :generic] ->
        # For generic actions, use the returns type if specified
        if action.returns do
          return_type = get_ts_type(%{type: action.returns, constraints: action.constraints})

          """
          type Infer#{rpc_action_name_pascal}Result = #{return_type};
          """
        else
          """
          type Infer#{rpc_action_name_pascal}Result = any;
          """
        end
    end
  end

  defp generate_payload_builder(resource, _rpc_action, action, rpc_action_name) do
    rpc_action_name_pascal = snake_to_pascal_case(rpc_action_name)

    # Base payload construction with tenant handling
    formatted_fields_name = AshTypescript.FieldFormatter.format_field("fields", AshTypescript.Rpc.output_field_formatter())
    
    base_payload_with_tenant = fn ->
      if AshTypescript.Rpc.requires_tenant_parameter?(resource) do
        """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}",
            tenant: config.tenant,
            fields: config.#{formatted_fields_name}
          };
        """
      else
        """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}",
            fields: config.#{formatted_fields_name}
          };
        """
      end
    end

    cond do
      action.type == :read and not action.get? ->
        """
        export function build#{rpc_action_name_pascal}Payload(
          config: #{rpc_action_name_pascal}Config
        ): Record<string, any> {
        #{base_payload_with_tenant.()}

          if (config.filter) {
            payload.filter = config.filter;
          } else {
            payload.filter = {};
          }

          if (config.page) {
            payload.page = config.page;
          }

          if (config.sort) {
            payload.sort = config.sort;
          }

          if (config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())}) {
            payload.calculations = config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())};
          }

          if ("input" in config && config.input) {
            payload.input = config.input;
          } else {
            payload.input = {};
          }

          return payload;
        }
        """

      action.type == :read and action.get? ->
        """
        export function build#{rpc_action_name_pascal}Payload(
          config: #{rpc_action_name_pascal}Config
        ): Record<string, any> {
        #{base_payload_with_tenant.()}

          if (config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())}) {
            payload.calculations = config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())};
          }

          if ("input" in config && config.input) {
            payload.input = config.input;
          } else {
            payload.input = {};
          }

          return payload;
        }
        """

      action.type == :create ->
        """
        export function build#{rpc_action_name_pascal}Payload(
          config: #{rpc_action_name_pascal}Config
        ): Record<string, any> {
        #{base_payload_with_tenant.()}

          if (config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())}) {
            payload.calculations = config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())};
          }

          if ("input" in config && config.input) {
            payload.input = config.input;
          } else {
            payload.input = {};
          }

          return payload;
        }
        """

      action.type == :update ->
        update_payload_base = if AshTypescript.Rpc.requires_tenant_parameter?(resource) do
          """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}",
            tenant: config.tenant,
            fields: config.#{formatted_fields_name},
            primary_key: config.primaryKey
          };
          """
        else
          """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}",
            fields: config.#{formatted_fields_name},
            primary_key: config.primaryKey
          };
          """
        end

        """
        export function build#{rpc_action_name_pascal}Payload(
          config: #{rpc_action_name_pascal}Config
        ): Record<string, any> {
        #{update_payload_base}

          if (config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())}) {
            payload.calculations = config.#{AshTypescript.FieldFormatter.format_field("calculations", AshTypescript.Rpc.output_field_formatter())};
          }

          if ("input" in config && config.input) {
            payload.input = config.input;
          } else {
            payload.input = {};
          }

          return payload;
        }
        """

      action.type == :destroy ->
        destroy_payload_base = if AshTypescript.Rpc.requires_tenant_parameter?(resource) do
          """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}",
            tenant: config.tenant,
            primary_key: config.primaryKey
          };
          """
        else
          """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}",
            primary_key: config.primaryKey
          };
          """
        end

        """
        export function build#{rpc_action_name_pascal}Payload(
          config: #{rpc_action_name_pascal}Config
        ): Record<string, any> {
        #{destroy_payload_base}

          if ("input" in config && config.input) {
            payload.input = config.input;
          } else {
            payload.input = {};
          }

          return payload;
        }
        """

      action.type == :action ->
        action_payload_base = if AshTypescript.Rpc.requires_tenant_parameter?(resource) do
          """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}",
            tenant: config.tenant
          };
          """
        else
          """
          const payload: Record<string, any> = {
            action: "#{rpc_action_name}"
          };
          """
        end

        """
        export function build#{rpc_action_name_pascal}Payload(
          config: #{rpc_action_name_pascal}Config
        ): Record<string, any> {
        #{action_payload_base}

          if ("input" in config && config.input) {
            payload.input = config.input;
          } else {
            payload.input = {};
          }

          return payload;
        }
        """
    end
  end

  defp generate_rpc_execution_function(_rpc_action, action, rpc_action_name, endpoint_process) do
    function_name = snake_to_camel_case(rpc_action_name)

    # Add proper type handling for different action types
    is_generic_action = action.type in [:action, :generic]

    rpc_action_name_pascal = snake_to_pascal_case(rpc_action_name)

    result_handling =
      case action.type do
        :destroy ->
          "return;"

        _ when is_generic_action ->
          "return result.data as Infer#{rpc_action_name_pascal}Result;"

        _ ->
          "return result.data as Infer#{rpc_action_name_pascal}Result<#{rpc_action_name_pascal}Config>;"
      end

    result_type =
      case action.type do
        :destroy -> "void"
        _ when is_generic_action -> "Infer#{rpc_action_name_pascal}Result"
        _ -> "Infer#{rpc_action_name_pascal}Result<#{rpc_action_name_pascal}Config>"
      end

    """
    export async function #{function_name}(
      config: #{rpc_action_name_pascal}Config
    ): Promise<#{result_type}> {
      const payload = build#{rpc_action_name_pascal}Payload(config);

      const csrfToken = document
        ?.querySelector("meta[name='csrf-token']")
        ?.getAttribute("content");

      const headers: Record<string, string> = {
        "Content-Type": "application/json",
      };

      if (csrfToken) {
        headers["X-CSRF-Token"] = csrfToken;
      }

      const response = await fetch("#{endpoint_process}", {
        method: "POST",
        headers,
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`Rpc call failed: ${response.statusText}`);
      }

      const result = await response.json();
      #{result_handling}
    }
    """
  end

  defp generate_validation_function(resource, rpc_action, action, rpc_action_name, endpoint_validate) do
    # Only generate validation functions for create, update, and destroy actions
    case action.type do
      :read ->
        ""

      :action ->
        ""

      _ ->
        # Convert Rpc action name to pascal case for validation function name
        rpc_action_name_pascal = AshTypescript.Helpers.snake_to_pascal_case(rpc_action_name)
        validation_function_name = "validate#{rpc_action_name_pascal}"

        # Determine if we need primary_key parameter
        needs_primary_key = action.type in [:update, :destroy]

        # Check if action has input parameters
        has_input = length(action.accept) > 0 or length(action.arguments) > 0
        
        # Check if resource requires tenant
        requires_tenant = AshTypescript.Rpc.requires_tenant_parameter?(resource)

        # Build function signature including tenant parameter when needed
        base_params = 
          case {needs_primary_key, has_input} do
            {true, true} ->
              ["primaryKey: string | number", "input: #{rpc_action_name_pascal}Config[\"input\"]"]

            {true, false} ->
              ["primaryKey: string | number"]

            {false, true} ->
              ["input: #{rpc_action_name_pascal}Config[\"input\"]"]

            {false, false} ->
              []
          end

        all_params = 
          if requires_tenant do
            ["tenant: string"] ++ base_params
          else
            base_params
          end

        params = Enum.join(all_params, ", ")

        # Build payload construction
        base_payload = 
          if requires_tenant do
            ["action: \"#{rpc_action.name}\"", "tenant: tenant"]
          else
            ["action: \"#{rpc_action.name}\""]
          end

        payload_with_pk =
          if needs_primary_key do
            base_payload ++ ["primary_key: primaryKey"]
          else
            base_payload
          end

        payload_lines =
          if has_input do
            payload_with_pk ++ ["input: input"]
          else
            payload_with_pk ++ ["input: {}"]
          end

        payload_content = Enum.join(payload_lines, ",\n    ")

        """
        export async function #{validation_function_name}(#{params}): Promise<{
          success: boolean;
          errors?: Record<string, string[]>;
        }> {
          const payload = {
            #{payload_content}
          };

          const csrfToken = document
            ?.querySelector("meta[name='csrf-token']")
            ?.getAttribute("content");

          const headers: Record<string, string> = {
            "Content-Type": "application/json",
          };

          if (csrfToken) {
            headers["X-CSRF-Token"] = csrfToken;
          }

          const response = await fetch("#{endpoint_validate}", {
            method: "POST",
            headers,
            body: JSON.stringify(payload),
          });

          if (!response.ok) {
            throw new Error(`Validation call failed: ${response.statusText}`);
          }

          const result = await response.json();

          if (result.success) {
            return { success: true };
          } else {
            return { success: false, errors: result.errors };
          }
        }
        """
    end
  end
end

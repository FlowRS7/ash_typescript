defmodule AshTypescript.Rpc.Codegen do
  @moduledoc """
  Generates TypeScript code for interacting with Ash resources via Rpc.
  """
  import AshTypescript.Codegen
  import AshTypescript.Filter
  import AshTypescript.Helpers

  alias AshTypescript.Rpc.RequestedFieldsProcessor

  def generate_typescript_types(otp_app, opts \\ []) do
    endpoint_process = Keyword.get(opts, :run_endpoint, "/rpc/run")
    endpoint_validate = Keyword.get(opts, :validate_endpoint, "/rpc/validate")

    resources_and_actions = get_rpc_resources_and_actions(otp_app)

    generate_full_typescript(
      resources_and_actions,
      endpoint_process,
      endpoint_validate,
      otp_app
    )
  end

  defp get_rpc_resources_and_actions(otp_app) do
    otp_app
    |> Ash.Info.domains()
    |> Enum.flat_map(fn domain ->
      # Get Rpc configuration from the domain
      rpc_config = AshTypescript.Rpc.Info.rpc(domain)

      Enum.flat_map(rpc_config, fn %{resource: resource, rpc_actions: rpc_actions} ->
        Enum.map(rpc_actions, fn rpc_action ->
          action = Ash.Resource.Info.action(resource, rpc_action.action)
          {resource, action, rpc_action}
        end)
      end)
    end)
  end

  defp get_typed_queries(otp_app) do
    otp_app
    |> Ash.Info.domains()
    |> Enum.flat_map(fn domain ->
      # Get Rpc configuration from the domain
      rpc_config = AshTypescript.Rpc.Info.rpc(domain)

      Enum.flat_map(rpc_config, fn %{resource: resource, typed_queries: typed_queries} ->
        Enum.map(typed_queries, fn typed_query ->
          action = Ash.Resource.Info.action(resource, typed_query.action)
          {resource, action, typed_query}
        end)
      end)
    end)
  end

  defp generate_imports() do
    case Application.get_env(:ash_typescript, :import_into_generated) do
      nil ->
        ""

      imports when is_list(imports) ->
        imports
        |> Enum.map(fn import_config ->
          import_name = Map.get(import_config, :import_name)
          file_path = Map.get(import_config, :file)

          if import_name && file_path do
            "import * as #{import_name} from \"#{file_path}\";"
          else
            ""
          end
        end)
        |> Enum.reject(&(&1 == ""))
        |> Enum.join("\n")
        |> case do
          "" -> ""
          imports_str -> imports_str <> "\n"
        end

      _ ->
        ""
    end
  end

  defp generate_full_typescript(
         rpc_resources_and_actions,
         endpoint_process,
         endpoint_validate,
         otp_app
       ) do
    # Extract only the Rpc resources
    rpc_resources =
      otp_app
      |> Ash.Info.domains()
      |> Enum.flat_map(fn domain ->
        AshTypescript.Rpc.Info.rpc(domain)
        |> Enum.map(fn %{resource: r} -> r end)
      end)

    actions =
      otp_app
      |> Ash.Info.domains()
      |> Enum.flat_map(fn domain ->
        AshTypescript.Rpc.Info.rpc(domain)
        |> Enum.flat_map(fn %{resource: resource, rpc_actions: rpc_actions} ->
          Enum.map(rpc_actions, fn %{action: action} ->
            Ash.Resource.Info.action(resource, action)
          end)
        end)
      end)

    # Get typed queries
    typed_queries = get_typed_queries(otp_app)

    # Discover embedded resources and include them in schema generation
    embedded_resources = AshTypescript.Codegen.find_embedded_resources(rpc_resources)
    all_resources_for_schemas = rpc_resources ++ embedded_resources

    """
    // Generated by AshTypescript
    // Do not edit this file manually

    #{generate_imports()}

    #{generate_ash_type_aliases(rpc_resources, actions)}

    #{generate_all_schemas_for_resources(all_resources_for_schemas, all_resources_for_schemas)}

    #{generate_filter_types(all_resources_for_schemas, all_resources_for_schemas)}

    #{generate_utility_types()}

    #{generate_helper_functions()}

    #{generate_typed_queries_section(typed_queries, all_resources_for_schemas)}

    #{generate_rpc_functions(rpc_resources_and_actions, endpoint_process, endpoint_validate, otp_app, all_resources_for_schemas)}
    """
  end

  defp generate_utility_types do
    """
    // Utility Types

    // Resource schema constraint
    type TypedSchema = {
      __type: "Resource" | "TypedStruct" | "TypedMap" | "Union";
      __primitiveFields: string;
    };

    // Utility type to convert union to intersection
    type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
      k: infer I,
    ) => void
      ? I
      : never;

    type HasComplexFields<T extends TypedSchema> = keyof Omit<
      T,
      "__primitiveFields" | "__type" | T["__primitiveFields"]
    > extends never
      ? false
      : true;

    type ComplexFieldKeys<T extends TypedSchema> = keyof Omit<
      T,
      "__primitiveFields" | "__type" | T["__primitiveFields"]
    >;

    type LeafFieldSelection<T extends TypedSchema> = T["__primitiveFields"];

    type ComplexFieldSelection<T extends TypedSchema> = {
      [K in ComplexFieldKeys<T>]?: T[K] extends {
        __type: "Relationship";
        __resource: infer Resource;
      }
        ? NonNullable<Resource> extends TypedSchema
          ? UnifiedFieldSelection<NonNullable<Resource>>[]
          : never
        : T[K] extends {
              __type: "ComplexCalculation";
              __returnType: infer ReturnType;
            }
          ? T[K] extends { __args: infer Args }
            ? NonNullable<ReturnType> extends TypedSchema
              ? {
                  args: Args;
                  fields: UnifiedFieldSelection<NonNullable<ReturnType>>[];
                }
              : { args: Args }
            : NonNullable<ReturnType> extends TypedSchema
              ? { fields: UnifiedFieldSelection<NonNullable<ReturnType>>[] }
              : never
          : NonNullable<T[K]> extends TypedSchema
            ? UnifiedFieldSelection<NonNullable<T[K]>>[]
            : never;
    };

    // Main type: Use explicit base case detection to prevent infinite recursion
    type UnifiedFieldSelection<T extends TypedSchema> =
      HasComplexFields<T> extends false
        ? LeafFieldSelection<T> // Base case: only primitives, no recursion
        : LeafFieldSelection<T> | ComplexFieldSelection<T>; // Recursive case

    type InferFieldValue<
      T extends TypedSchema,
      Field,
    > = Field extends T["__primitiveFields"]
      ? Field extends keyof T
        ? { [K in Field]: T[Field] }
        : never
      : Field extends Record<string, any>
        ? {
            [K in keyof Field]: K extends keyof T
              ? T[K] extends {
                  __type: "Relationship";
                  __resource: infer Resource;
                }
                ? NonNullable<Resource> extends TypedSchema
                  ? T[K] extends { __array: true }
                    ? Array<InferResult<NonNullable<Resource>, Field[K]>>
                    : null extends Resource
                      ? InferResult<NonNullable<Resource>, Field[K]> | null
                      : InferResult<NonNullable<Resource>, Field[K]>
                : never
              : T[K] extends {
                    __type: "ComplexCalculation";
                    __returnType: infer ReturnType;
                  }
                ? NonNullable<ReturnType> extends TypedSchema
                  ? null extends ReturnType
                    ? InferResult<NonNullable<ReturnType>, Field[K]["fields"]> | null
                    : InferResult<NonNullable<ReturnType>, Field[K]["fields"]>
                  : ReturnType
                : NonNullable<T[K]> extends TypedSchema
                  ? null extends T[K]
                    ? InferResult<NonNullable<T[K]>, Field[K]> | null
                    : InferResult<NonNullable<T[K]>, Field[K]>
                  : never
              : never;
          }
        : never;

    type InferResult<
      T extends TypedSchema,
      SelectedFields extends UnifiedFieldSelection<T>[],
    > = UnionToIntersection<
      {
        [K in keyof SelectedFields]: InferFieldValue<T, SelectedFields[K]>;
      }[number]
    >;

    // Legacy type for typed map results (needed for generic actions)
    type InferTypedMapResult<TypedMapSchema, Selection> =
      Selection extends string[]
        ? TypedMapSchema extends Record<string, any>
          ? {
              [K in Selection[number]]: K extends keyof TypedMapSchema
                ? TypedMapSchema[K]
                : never
            }
          : TypedMapSchema
        : TypedMapSchema;

    """
  end

  defp generate_helper_functions do
    """
    // Helper Functions

    /**
     * Gets the CSRF token from the page's meta tag
     * Returns null if no CSRF token is found
     */
    export function getPhoenixCSRFToken(): string | null {
      return document
        ?.querySelector("meta[name='csrf-token']")
        ?.getAttribute("content") || null;
    }

    /**
     * Builds headers object with CSRF token for Phoenix applications
     * Returns headers object with X-CSRF-Token (if available)
     */
    export function buildCSRFHeaders(): Record<string, string> {
      const headers: Record<string, string> = {};

      const csrfToken = getPhoenixCSRFToken();
      if (csrfToken) {
        headers["X-CSRF-Token"] = csrfToken;
      }

      return headers;
    }

    """
  end

  defp generate_rpc_functions(
         resources_and_actions,
         endpoint_process,
         endpoint_validate,
         otp_app,
         _resources
       ) do
    # Generate functions for each Rpc action
    rpc_functions =
      resources_and_actions
      |> Enum.map(fn resource_and_action ->
        generate_rpc_function(
          resource_and_action,
          resources_and_actions,
          endpoint_process,
          endpoint_validate,
          otp_app
        )
      end)
      |> Enum.join("\n\n")

    """
    #{rpc_functions}
    """
  end


  # Pagination detection functions - read actual Ash configuration
  def action_supports_pagination?(action) do
    action.type == :read and not action.get? and has_pagination_config?(action)
  end

  defp action_supports_offset_pagination?(action) do
    case get_pagination_config(action) do
      nil -> false
      pagination_config -> Map.get(pagination_config, :offset?, false)
    end
  end

  defp action_supports_keyset_pagination?(action) do
    case get_pagination_config(action) do
      nil -> false
      pagination_config -> Map.get(pagination_config, :keyset?, false)
    end
  end

  defp action_requires_pagination?(action) do
    case get_pagination_config(action) do
      nil -> false
      pagination_config -> Map.get(pagination_config, :required?, false)
    end
  end

  defp action_supports_countable?(action) do
    case get_pagination_config(action) do
      nil -> false
      pagination_config -> Map.get(pagination_config, :countable, false)
    end
  end

  defp action_has_default_limit?(action) do
    case get_pagination_config(action) do
      nil -> false
      pagination_config -> Map.has_key?(pagination_config, :default_limit)
    end
  end

  defp has_pagination_config?(action) do
    case action do
      %{pagination: pagination} when is_map(pagination) -> true
      _ -> false
    end
  end

  defp get_pagination_config(action) do
    case action do
      %{pagination: pagination} when is_map(pagination) -> pagination
      _ -> nil
    end
  end

  # Helper to detect if a generic action returns a type that supports field selection
  def action_returns_field_selectable_type?(action) do
    case action.returns do
      # Array of structs (resources)
      {:array, Ash.Type.Struct} ->
        items_constraints = Keyword.get(action.constraints || [], :items, [])

        if Keyword.has_key?(items_constraints, :instance_of) do
          {:ok, :array_of_resource, Keyword.get(items_constraints, :instance_of)}
        else
          {:error, :no_instance_of_defined}
        end

      # Array of maps (typed maps with field definitions)
      {:array, Ash.Type.Map} ->
        items_constraints = Keyword.get(action.constraints || [], :items, [])

        if Keyword.has_key?(items_constraints, :fields) do
          {:ok, :array_of_typed_map, Keyword.get(items_constraints, :fields)}
        else
          {:error, :no_fields_defined}
        end

      # Single struct (resource)
      Ash.Type.Struct ->
        constraints = action.constraints || []

        if Keyword.has_key?(constraints, :instance_of) do
          {:ok, :resource, Keyword.get(constraints, :instance_of)}
        else
          {:error, :no_instance_of_defined}
        end

      # Single map (typed map with field definitions)
      Ash.Type.Map ->
        constraints = action.constraints || []

        if Keyword.has_key?(constraints, :fields) do
          {:ok, :typed_map, Keyword.get(constraints, :fields)}
        else
          {:error, :no_fields_defined}
        end

      _ ->
        {:error, :not_field_selectable_type}
    end
  end

  defp generate_pagination_fields_only(action) do
    if action_supports_pagination?(action) do
      generate_pagination_fields(action)
    else
      []
    end
  end

  defp generate_pagination_fields(action) do
    supports_offset = action_supports_offset_pagination?(action)
    supports_keyset = action_supports_keyset_pagination?(action)
    supports_countable = action_supports_countable?(action)
    is_required = action_requires_pagination?(action)
    has_default_limit = action_has_default_limit?(action)

    if supports_offset or supports_keyset do
      optional_mark = if is_required, do: "", else: "?"
      limit_required = if is_required and not has_default_limit, do: "", else: "?"

      cond do
        supports_offset and supports_keyset ->
          # Generate union type for mixed pagination support
          generate_mixed_pagination_fields(limit_required, supports_countable, optional_mark)

        supports_offset ->
          # Generate offset-only pagination interface
          generate_offset_pagination_fields(limit_required, supports_countable, optional_mark)

        supports_keyset ->
          # Generate keyset-only pagination interface
          generate_keyset_pagination_fields(limit_required, optional_mark)
      end
    else
      []
    end
  end

  defp generate_offset_pagination_fields(limit_required, supports_countable, optional_mark) do
    fields = ["    limit#{limit_required}: number;", "    offset?: number;"]

    fields =
      if supports_countable do
        fields ++ ["    count?: boolean;"]
      else
        fields
      end

    [
      "  page#{optional_mark}: {"
    ] ++
      fields ++
      [
        "  };"
      ]
  end

  defp generate_keyset_pagination_fields(limit_required, optional_mark) do
    fields = [
      "    limit#{limit_required}: number;",
      "    after?: string;",
      "    before?: string;"
    ]

    [
      "  page#{optional_mark}: {"
    ] ++
      fields ++
      [
        "  };"
      ]
  end

  defp generate_mixed_pagination_fields(limit_required, supports_countable, optional_mark) do
    # Generate union type for mixed pagination support (without type discriminator)
    offset_fields = [
      "      limit#{limit_required}: number;",
      "      offset?: number;"
    ]

    offset_fields =
      if supports_countable do
        offset_fields ++ ["      count?: boolean;"]
      else
        offset_fields
      end

    keyset_fields = [
      "      limit#{limit_required}: number;",
      "      after?: string;",
      "      before?: string;"
    ]

    keyset_fields =
      if supports_countable do
        keyset_fields ++ ["      count?: boolean;"]
      else
        keyset_fields
      end

    [
      "  page#{optional_mark}:"
    ] ++
      [
        "    | {"
      ] ++
      offset_fields ++
      [
        "    }"
      ] ++
      [
        "    | {"
      ] ++
      keyset_fields ++
      [
        "    };"
      ]
  end






  defp generate_typed_queries_section([], _all_resources), do: ""

  defp generate_typed_queries_section(typed_queries, all_resources) do
    # Group typed queries by resource for better organization
    queries_by_resource =
      Enum.group_by(typed_queries, fn {resource, _action, _query} -> resource end)

    sections =
      Enum.map(queries_by_resource, fn {resource, queries} ->
        resource_name = build_resource_type_name(resource)

        query_types_and_consts =
          Enum.map(queries, fn {resource, action, typed_query} ->
            generate_typed_query_type_and_const(resource, action, typed_query, all_resources)
          end)

        """
        // #{resource_name} Typed Queries
        #{Enum.join(query_types_and_consts, "\n\n")}
        """
      end)

    """
    // ============================
    // Typed Queries
    // ============================
    // Use these types and field constants for server-side rendering and data fetching.
    // The field constants can be used with the corresponding RPC actions for client-side refetching.

    #{Enum.join(sections, "\n\n")}
    """
  end

  defp generate_typed_query_type_and_const(resource, action, typed_query, _all_resources) do
    resource_name = build_resource_type_name(resource)

    # Process fields to get the template
    atomized_fields = RequestedFieldsProcessor.atomize_requested_fields(typed_query.fields)

    case RequestedFieldsProcessor.process(resource, action.name, atomized_fields) do
      {:ok, {_select, _load, _template}} ->
        # Format the original fields for both type and constant (preserves args structure)
        const_fields = format_fields_for_typescript(atomized_fields)

        # Generate the type
        type_name = typed_query.ts_result_type_name
        const_name = typed_query.ts_fields_const_name

        # Check if action returns array or single result
        is_array = action.type == :read && !action.get?

        result_type =
          if is_array do
            "Array<InferResult<#{resource_name}ResourceSchema, #{const_fields}>>"
          else
            "InferResult<#{resource_name}ResourceSchema, #{const_fields}>"
          end

        """
        // Type for #{typed_query.name}
        export type #{type_name} = #{result_type};

        // Field selection for #{typed_query.name} - use with RPC actions for refetching
        export const #{const_name} = #{const_fields} as const;
        """

      {:error, error} ->
        raise "Error processing typed query #{typed_query.name}: #{inspect(error)}"
    end
  end

  defp format_fields_for_typescript(fields) do
    "[" <> format_fields_array(fields) <> "]"
  end

  defp format_fields_array(fields) do
    fields
    |> Enum.map(&format_field_item/1)
    |> Enum.join(", ")
  end

  defp format_field_item(field) when is_atom(field) do
    ~s["#{format_field_name(field)}"]
  end

  defp format_field_item({field, nested_fields}) when is_atom(field) and is_list(nested_fields) do
    # Relationship
    "{ #{format_field_name(field)}: [#{format_fields_array(nested_fields)}] }"
  end

  defp format_field_item({field, {args, nested_fields}})
       when is_atom(field) and is_map(args) and is_list(nested_fields) do
    # Calculation with args - this comes from the extraction template after processing
    args_json = format_args_map(args)

    "{ #{format_field_name(field)}: { args: #{args_json}, fields: [#{format_fields_array(nested_fields)}] } }"
  end

  defp format_field_item({field, nested_fields}) when is_atom(field) and is_map(nested_fields) do
    # Handle map structure (this might be a calculation with args and fields)
    case nested_fields do
      %{args: args, fields: fields} ->
        # Complex calculation from template
        args_json = format_args_map(args)

        "{ #{format_field_name(field)}: { args: #{args_json}, fields: [#{format_fields_array(fields)}] } }"

      _ ->
        # Other map structure - treat as generic
        inspect(nested_fields)
    end
  end

  defp format_field_item(%{} = field_map) do
    # Handle map - convert to JavaScript object syntax
    formatted_pairs =
      field_map
      |> Enum.map(fn {k, v} ->
        key = format_field_name(k)
        value = format_field_item(v)
        "#{key}: #{value}"
      end)
      |> Enum.join(", ")

    "{ #{formatted_pairs} }"
  end

  defp format_field_item(list) when is_list(list) do
    # Handle list - convert to JavaScript array syntax
    formatted_items =
      list
      |> Enum.map(&format_field_item/1)
      |> Enum.join(", ")

    "[#{formatted_items}]"
  end

  defp format_field_item(field), do: inspect(field)

  defp format_field_name(atom) do
    formatter = AshTypescript.Rpc.output_field_formatter()
    AshTypescript.FieldFormatter.format_field(atom, formatter)
  end

  defp format_args_map(args) do
    formatted_args =
      args
      |> Enum.map(fn {k, v} ->
        "\"#{format_field_name(k)}\": #{Jason.encode!(v)}"
      end)
      |> Enum.join(", ")

    "{ #{formatted_args} }"
  end

  # New pattern generators for improved type safety

  defp generate_input_type(resource, action, rpc_action_name) do
    input_type_name = "#{snake_to_pascal_case(rpc_action_name)}Input"

    input_field_defs =
      case action.type do
        :read ->
          # For read actions, only use arguments (get_by automatically creates arguments)
          arguments = action.arguments

          if arguments != [] do
            Enum.map(arguments, fn arg ->
              optional = arg.allow_nil? || arg.default != nil

              formatted_arg_name =
                AshTypescript.FieldFormatter.format_field(
                  arg.name,
                  AshTypescript.Rpc.output_field_formatter()
                )

              {formatted_arg_name, get_ts_type(arg), optional}
            end)
          else
            []
          end

        :create ->
          accepts = Ash.Resource.Info.action(resource, action.name).accept || []
          arguments = action.arguments

          if accepts != [] || arguments != [] do
            # Generate input field definitions
            accept_field_defs =
              Enum.map(accepts, fn field_name ->
                attr = Ash.Resource.Info.attribute(resource, field_name)
                optional = attr.allow_nil? || attr.default != nil
                base_type = AshTypescript.Codegen.get_ts_input_type(attr)
                field_type = if attr.allow_nil?, do: "#{base_type} | null", else: base_type

                formatted_field_name =
                  AshTypescript.FieldFormatter.format_field(
                    field_name,
                    AshTypescript.Rpc.output_field_formatter()
                  )

                {formatted_field_name, field_type, optional}
              end)

            argument_field_defs =
              Enum.map(arguments, fn arg ->
                optional = arg.allow_nil? || arg.default != nil

                formatted_arg_name =
                  AshTypescript.FieldFormatter.format_field(
                    arg.name,
                    AshTypescript.Rpc.output_field_formatter()
                  )

                {formatted_arg_name, get_ts_type(arg), optional}
              end)

            accept_field_defs ++ argument_field_defs
          else
            []
          end

        action_type when action_type in [:update, :destroy] ->
          # For update/destroy, generate only input fields, not primary key
          # Primary key will be handled separately in the config object
          if action.accept != [] || action.arguments != [] do
            accept_field_defs =
              Enum.map(action.accept, fn field_name ->
                attr = Ash.Resource.Info.attribute(resource, field_name)
                optional = attr.allow_nil? || attr.default != nil
                base_type = AshTypescript.Codegen.get_ts_input_type(attr)
                field_type = if attr.allow_nil?, do: "#{base_type} | null", else: base_type

                formatted_field_name =
                  AshTypescript.FieldFormatter.format_field(
                    field_name,
                    AshTypescript.Rpc.output_field_formatter()
                  )

                {formatted_field_name, field_type, optional}
              end)

            argument_field_defs =
              Enum.map(action.arguments, fn arg ->
                optional = arg.allow_nil? || arg.default != nil

                formatted_arg_name =
                  AshTypescript.FieldFormatter.format_field(
                    arg.name,
                    AshTypescript.Rpc.output_field_formatter()
                  )

                {formatted_arg_name, get_ts_type(arg), optional}
              end)

            accept_field_defs ++ argument_field_defs
          else
            []
          end

        :action ->
          arguments = action.arguments

          if arguments != [] do
            Enum.map(arguments, fn arg ->
              optional = arg.allow_nil? || arg.default != nil

              formatted_arg_name =
                AshTypescript.FieldFormatter.format_field(
                  arg.name,
                  AshTypescript.Rpc.output_field_formatter()
                )

              {formatted_arg_name, get_ts_type(arg), optional}
            end)
          else
            []
          end
      end

    # Generate TypeScript type definition
    if input_field_defs != [] do
      field_lines =
        Enum.map(input_field_defs, fn {name, type, optional} ->
          "  #{name}#{if optional, do: "?", else: ""}: #{type};"
        end)

      """
      export type #{input_type_name} = {
      #{Enum.join(field_lines, "\n")}
      };
      """
    else
      # If no input fields, generate an empty input type
      """
      export type #{input_type_name} = {};
      """
    end
  end

  defp generate_result_type(resource, action, rpc_action_name) do
    resource_name = build_resource_type_name(resource)
    rpc_action_name_pascal = snake_to_pascal_case(rpc_action_name)

    case action.type do
      :read when action.get? ->
        """
        type Infer#{rpc_action_name_pascal}Result<
          Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[],
        > = InferResult<#{resource_name}ResourceSchema, Fields> | null;
        """

      :read ->
        # For read actions, check if pagination is supported
        if action_supports_pagination?(action) do
          generate_pagination_result_type(resource, action, rpc_action_name_pascal, resource_name)
        else
          """
          type Infer#{rpc_action_name_pascal}Result<
            Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[],
          > = Array<InferResult<#{resource_name}ResourceSchema, Fields>>;
          """
        end

      action_type when action_type in [:create, :update] ->
        """
        type Infer#{rpc_action_name_pascal}Result<
          Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[],
        > = InferResult<#{resource_name}ResourceSchema, Fields>;
        """

      :destroy ->
        # No result type needed - function signatures use void directly
        ""

      :action ->
        # Check if generic action returns a field-selectable type
        case action_returns_field_selectable_type?(action) do
          {:ok, type, value} when type in [:resource, :array_of_resource] ->
            # For resources, use the resource's schema for field selection
            target_resource_name = build_resource_type_name(value)

            if type == :array_of_resource do
              """
              type Infer#{rpc_action_name_pascal}Result<
                Fields extends UnifiedFieldSelection<#{target_resource_name}ResourceSchema>[],
              > = Array<InferResult<#{target_resource_name}ResourceSchema, Fields>>;
              """
            else
              """
              type Infer#{rpc_action_name_pascal}Result<
                Fields extends UnifiedFieldSelection<#{target_resource_name}ResourceSchema>[],
              > = InferResult<#{target_resource_name}ResourceSchema, Fields>;
              """
            end

          {:ok, type, fields} when type in [:typed_map, :array_of_typed_map] ->
            # For typed maps, generate a field-selectable schema
            typed_map_schema = build_map_type(fields)

            if type == :array_of_typed_map do
              """
              type Infer#{rpc_action_name_pascal}Result<
                Fields extends UnifiedFieldSelection<#{typed_map_schema}>[],
              > = Array<InferResult<#{typed_map_schema}, Fields>>;
              """
            else
              """
              type Infer#{rpc_action_name_pascal}Result<
                Fields extends UnifiedFieldSelection<#{typed_map_schema}>[],
              > = InferResult<#{typed_map_schema}, Fields>;
              """
            end

          _ ->
            # Non-field-selectable types or no return type
            if action.returns do
              return_type = get_ts_type(%{type: action.returns, constraints: action.constraints})

              """
              type Infer#{rpc_action_name_pascal}Result = #{return_type};
              """
            else
              """
              type Infer#{rpc_action_name_pascal}Result = {};
              """
            end
        end
    end
  end

  defp generate_pagination_result_type(_resource, action, rpc_action_name_pascal, resource_name) do
    supports_offset = action_supports_offset_pagination?(action)
    supports_keyset = action_supports_keyset_pagination?(action)

    cond do
      supports_offset and supports_keyset ->
        # Generate union type for mixed pagination support
        generate_mixed_pagination_result_type(rpc_action_name_pascal, resource_name)

      supports_offset ->
        # Generate offset-only pagination result type
        generate_offset_pagination_result_type(rpc_action_name_pascal, resource_name)

      supports_keyset ->
        # Generate keyset-only pagination result type
        generate_keyset_pagination_result_type(rpc_action_name_pascal, resource_name)
    end
  end

  defp generate_offset_pagination_result_type(rpc_action_name_pascal, resource_name) do
    formatter = AshTypescript.Rpc.output_field_formatter()
    results_field = AshTypescript.FieldFormatter.format_field("results", formatter)
    has_more_field = AshTypescript.FieldFormatter.format_field("has_more", formatter)
    limit_field = AshTypescript.FieldFormatter.format_field("limit", formatter)
    offset_field = AshTypescript.FieldFormatter.format_field("offset", formatter)

    """
    type Infer#{rpc_action_name_pascal}Result<
      Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[],
    > = {
      #{results_field}: Array<InferResult<#{resource_name}ResourceSchema, Fields>>;
      #{has_more_field}: boolean;
      #{limit_field}: number;
      #{offset_field}: number;
    };
    """
  end

  defp generate_keyset_pagination_result_type(rpc_action_name_pascal, resource_name) do
    formatter = AshTypescript.Rpc.output_field_formatter()
    results_field = AshTypescript.FieldFormatter.format_field("results", formatter)
    has_more_field = AshTypescript.FieldFormatter.format_field("has_more", formatter)
    limit_field = AshTypescript.FieldFormatter.format_field("limit", formatter)
    after_field = AshTypescript.FieldFormatter.format_field("after", formatter)
    before_field = AshTypescript.FieldFormatter.format_field("before", formatter)
    previous_page_field = AshTypescript.FieldFormatter.format_field("previous_page", formatter)
    next_page_field = AshTypescript.FieldFormatter.format_field("next_page", formatter)

    """
    type Infer#{rpc_action_name_pascal}Result<
      Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[],
    > = {
      #{results_field}: Array<InferResult<#{resource_name}ResourceSchema, Fields>>;
      #{has_more_field}: boolean;
      #{limit_field}: number;
      #{after_field}: string | null;
      #{before_field}: string | null;
      #{previous_page_field}: string;
      #{next_page_field}: string;
    };
    """
  end

  defp generate_mixed_pagination_result_type(rpc_action_name_pascal, resource_name) do
    formatter = AshTypescript.Rpc.output_field_formatter()
    results_field = AshTypescript.FieldFormatter.format_field("results", formatter)
    has_more_field = AshTypescript.FieldFormatter.format_field("has_more", formatter)
    limit_field = AshTypescript.FieldFormatter.format_field("limit", formatter)
    offset_field = AshTypescript.FieldFormatter.format_field("offset", formatter)
    after_field = AshTypescript.FieldFormatter.format_field("after", formatter)
    before_field = AshTypescript.FieldFormatter.format_field("before", formatter)
    count_field = AshTypescript.FieldFormatter.format_field("count", formatter)
    previous_page_field = AshTypescript.FieldFormatter.format_field("previous_page", formatter)
    next_page_field = AshTypescript.FieldFormatter.format_field("next_page", formatter)
    type_field = AshTypescript.FieldFormatter.format_field("type", formatter)

    """
    type Infer#{rpc_action_name_pascal}Result<
      Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[],
    > = {
      #{results_field}: Array<InferResult<#{resource_name}ResourceSchema, Fields>>;
      #{has_more_field}: boolean;
      #{limit_field}: number;
      #{offset_field}: number;
      #{count_field}?: number | null;
      #{type_field}: "offset";
    } | {
      #{results_field}: Array<InferResult<#{resource_name}ResourceSchema, Fields>>;
      #{has_more_field}: boolean;
      #{limit_field}: number;
      #{after_field}: string | null;
      #{before_field}: string | null;
      #{previous_page_field}: string;
      #{next_page_field}: string;
      #{count_field}?: number | null;
      #{type_field}: "keyset";
    };
    """
  end

  defp generate_payload_builder(resource, _rpc_action, action, rpc_action_name) do
    rpc_action_name_pascal = snake_to_pascal_case(rpc_action_name)
    input_type_name = "#{rpc_action_name_pascal}Input"
    resource_name = build_resource_type_name(resource)

    # Check various action characteristics
    requires_tenant = AshTypescript.Rpc.requires_tenant_parameter?(resource)
    requires_primary_key = action.type in [:update, :destroy]
    supports_pagination = action.type == :read and not action.get? and action_supports_pagination?(action)
    supports_filtering = action.type == :read and not action.get?

    # Build config object type definition
    config_fields = []

    # Add tenant field if needed
    config_fields = if requires_tenant do
      config_fields ++ ["  tenant: string;"]
    else
      config_fields
    end

    # Add primary key field for update/destroy actions
    config_fields = if requires_primary_key do
      primary_key_attrs = Ash.Resource.Info.primary_key(resource)

      if Enum.count(primary_key_attrs) == 1 do
        attr_name = Enum.at(primary_key_attrs, 0)
        attr = Ash.Resource.Info.attribute(resource, attr_name)
        config_fields ++ ["  primaryKey: #{get_ts_type(attr)};"]
      else
        primary_key_def = [
          "  primaryKey: {"
        ] ++
        Enum.map(primary_key_attrs, fn attr_name ->
          attr = Ash.Resource.Info.attribute(resource, attr_name)
          "    #{attr.name}: #{get_ts_type(attr)};"
        end) ++
        [
          "  };"
        ]
        config_fields ++ primary_key_def
      end
    else
      config_fields
    end

    # Add input field
    config_fields = config_fields ++ ["  input: #{input_type_name};"]

    # Add fields field (always present for non-destroy actions)
    config_fields = if action.type != :destroy do
      case action.type do
        :action ->
          # Check if this generic action returns a field-selectable type
          case action_returns_field_selectable_type?(action) do
            {:ok, type, _value} when type in [:resource, :array_of_resource] ->
              config_fields ++ ["  fields: UnifiedFieldSelection<#{resource_name}ResourceSchema>[];"]

            {:ok, type, fields} when type in [:typed_map, :array_of_typed_map] ->
              # For typed maps, use a custom field selection for the map's fields
              typed_map_field_names =
                Enum.map(fields, fn {field_name, _} -> Atom.to_string(field_name) end)

              config_fields ++ [
                "  fields: (\"#{Enum.join(typed_map_field_names, "\" | \"")}\")[];"
              ]

            _ ->
              # No fields for non-field-selectable generic actions
              config_fields
          end

        _ ->
          config_fields ++ ["  fields: UnifiedFieldSelection<#{resource_name}ResourceSchema>[];"]
      end
    else
      config_fields
    end

    # Add filter field for read actions (except get)
    config_fields = if supports_filtering do
      config_fields ++ ["  filter?: #{resource_name}FilterInput;"]
    else
      config_fields
    end

    # Add sort field for read actions (except get)
    config_fields = if supports_filtering do
      config_fields ++ ["  sort?: string;"]
    else
      config_fields
    end

    # Add pagination field for read actions with pagination
    config_fields = if supports_pagination do
      pagination_fields = generate_pagination_config_fields(action)
      config_fields ++ pagination_fields
    else
      config_fields
    end

    # Add headers field (always optional)
    config_fields = config_fields ++ ["  headers?: Record<string, string>;"]

    # Generate function
    config_type_def = "{\n#{Enum.join(config_fields, "\n")}\n}"

    # Generate payload construction logic
    payload_construction = generate_payload_construction(resource, action, rpc_action_name, requires_tenant, requires_primary_key, supports_filtering, supports_pagination)

    """
    export function build#{rpc_action_name_pascal}Payload(config: #{config_type_def}): Record<string, any> {
    #{payload_construction}
    }
    """
  end

  defp generate_pagination_config_fields(action) do
    supports_offset = action_supports_offset_pagination?(action)
    supports_keyset = action_supports_keyset_pagination?(action)
    supports_countable = action_supports_countable?(action)
    is_required = action_requires_pagination?(action)
    has_default_limit = action_has_default_limit?(action)

    if supports_offset or supports_keyset do
      optional_mark = if is_required, do: "", else: "?"
      limit_required = if is_required and not has_default_limit, do: "", else: "?"

      cond do
        supports_offset and supports_keyset ->
          # Generate union type for mixed pagination support
          generate_mixed_pagination_config_fields(limit_required, supports_countable, optional_mark)

        supports_offset ->
          # Generate offset-only pagination interface
          generate_offset_pagination_config_fields(limit_required, supports_countable, optional_mark)

        supports_keyset ->
          # Generate keyset-only pagination interface
          generate_keyset_pagination_config_fields(limit_required, optional_mark)
      end
    else
      []
    end
  end

  defp generate_offset_pagination_config_fields(limit_required, supports_countable, optional_mark) do
    fields = ["    limit#{limit_required}: number;", "    offset?: number;"]

    fields =
      if supports_countable do
        fields ++ ["    count?: boolean;"]
      else
        fields
      end

    [
      "  page#{optional_mark}: {"
    ] ++
      fields ++
      [
        "  };"
      ]
  end

  defp generate_keyset_pagination_config_fields(limit_required, optional_mark) do
    fields = [
      "    limit#{limit_required}: number;",
      "    after?: string;",
      "    before?: string;"
    ]

    [
      "  page#{optional_mark}: {"
    ] ++
      fields ++
      [
        "  };"
      ]
  end

  defp generate_mixed_pagination_config_fields(limit_required, supports_countable, optional_mark) do
    # Generate union type for mixed pagination support (without type discriminator)
    offset_fields = [
      "      limit#{limit_required}: number;",
      "      offset?: number;"
    ]

    offset_fields =
      if supports_countable do
        offset_fields ++ ["      count?: boolean;"]
      else
        offset_fields
      end

    keyset_fields = [
      "      limit#{limit_required}: number;",
      "      after?: string;",
      "      before?: string;"
    ]

    keyset_fields =
      if supports_countable do
        keyset_fields ++ ["      count?: boolean;"]
      else
        keyset_fields
      end

    [
      "  page#{optional_mark}:"
    ] ++
      [
        "    | {"
      ] ++
      offset_fields ++
      [
        "    }"
      ] ++
      [
        "    | {"
      ] ++
      keyset_fields ++
      [
        "    };"
      ]
  end

  defp generate_payload_construction(_resource, action, rpc_action_name, requires_tenant, requires_primary_key, supports_filtering, supports_pagination) do
    # Start with base payload
    base_fields = ["action: \"#{rpc_action_name}\""]

    # Add tenant if required
    base_fields = if requires_tenant do
      base_fields ++ ["tenant: config.tenant"]
    else
      base_fields
    end

    # Add primary key if required
    base_fields = if requires_primary_key do
      base_fields ++ ["primary_key: config.primaryKey"]
    else
      base_fields
    end

    # Add fields if action needs them (all except destroy)
    base_fields = if action.type != :destroy do
      case action.type do
        :action ->
          # Check if this generic action returns a field-selectable type
          case action_returns_field_selectable_type?(action) do
            {:ok, type, _value} when type in [:resource, :array_of_resource, :typed_map, :array_of_typed_map] ->
              base_fields ++ ["fields: config.fields"]

            _ ->
              base_fields
          end

        _ ->
          base_fields ++ ["fields: config.fields"]
      end
    else
      base_fields
    end

    base_payload_content = Enum.join(base_fields, ",\n    ")

    payload_construction = """
      const payload: Record<string, any> = {
        #{base_payload_content}
      };

      if (config.input) {
        payload.input = config.input;
      } else {
        payload.input = {};
      }
    """

    # Add filter handling for read actions
    payload_construction = if supports_filtering do
      payload_construction <> """

      if (config.filter) {
        payload.filter = config.filter;
      } else {
        payload.filter = {};
      }

      if (config.sort) {
        payload.sort = config.sort;
      }
      """
    else
      payload_construction
    end

    # Add pagination handling
    payload_construction = if supports_pagination do
      payload_construction <> """

      if (config.page) {
        payload.page = config.page;
      }
      """
    else
      payload_construction
    end

    payload_construction <> """

      return payload;
    """
  end

  defp generate_rpc_execution_function(resource, action, rpc_action_name, endpoint_process) do
    function_name =
      AshTypescript.FieldFormatter.format_field(
        rpc_action_name,
        AshTypescript.Rpc.output_field_formatter()
      )

    rpc_action_name_pascal = snake_to_pascal_case(rpc_action_name)
    input_type_name = "#{rpc_action_name_pascal}Input"
    resource_name = build_resource_type_name(resource)

    # Check action characteristics
    is_generic_action = action.type in [:action, :generic]
    _is_field_selectable_generic =
      is_generic_action && match?({:ok, _, _}, action_returns_field_selectable_type?(action))
    requires_tenant = AshTypescript.Rpc.requires_tenant_parameter?(resource)
    requires_primary_key = action.type in [:update, :destroy]
    supports_pagination = action.type == :read and not action.get? and action_supports_pagination?(action)
    supports_filtering = action.type == :read and not action.get?

    # Generate config object type definition (same as payload builder)
    config_fields = []

    # Add tenant field if needed
    config_fields = if requires_tenant do
      config_fields ++ ["  tenant: string;"]
    else
      config_fields
    end

    # Add primary key field for update/destroy actions
    config_fields = if requires_primary_key do
      primary_key_attrs = Ash.Resource.Info.primary_key(resource)

      if Enum.count(primary_key_attrs) == 1 do
        attr_name = Enum.at(primary_key_attrs, 0)
        attr = Ash.Resource.Info.attribute(resource, attr_name)
        config_fields ++ ["  primaryKey: #{get_ts_type(attr)};"]
      else
        primary_key_def = [
          "  primaryKey: {"
        ] ++
        Enum.map(primary_key_attrs, fn attr_name ->
          attr = Ash.Resource.Info.attribute(resource, attr_name)
          "    #{attr.name}: #{get_ts_type(attr)};"
        end) ++
        [
          "  };"
        ]
        config_fields ++ primary_key_def
      end
    else
      config_fields
    end

    # Add input field
    config_fields = config_fields ++ ["  input: #{input_type_name};"]

    # Add fields field (always present for non-destroy actions)
    {config_fields, has_fields, fields_generic} = if action.type != :destroy do
      case action.type do
        :action ->
          # Check if this generic action returns a field-selectable type
          case action_returns_field_selectable_type?(action) do
            {:ok, type, _value} when type in [:resource, :array_of_resource] ->
              updated_fields = config_fields ++ ["  fields: Fields;"]
              {updated_fields, true, "Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[]"}

            {:ok, type, fields} when type in [:typed_map, :array_of_typed_map] ->
              # For typed maps, use a custom field selection for the map's fields
              typed_map_field_names =
                Enum.map(fields, fn {field_name, _} -> Atom.to_string(field_name) end)

              updated_fields = config_fields ++ [
                "  fields: Fields;"
              ]
              {updated_fields, true, "Fields extends (\"#{Enum.join(typed_map_field_names, "\" | \"")}\")[]"}

            _ ->
              # No fields for non-field-selectable generic actions
              {config_fields, false, nil}
          end

        _ ->
          updated_fields = config_fields ++ ["  fields: Fields;"]
          {updated_fields, true, "Fields extends UnifiedFieldSelection<#{resource_name}ResourceSchema>[]"}
      end
    else
      {config_fields, false, nil}
    end

    # Add filter field for read actions (except get)
    config_fields = if supports_filtering do
      config_fields ++ ["  filter?: #{resource_name}FilterInput;"]
    else
      config_fields
    end

    # Add sort field for read actions (except get)
    config_fields = if supports_filtering do
      config_fields ++ ["  sort?: string;"]
    else
      config_fields
    end

    # Add pagination field for read actions with pagination
    config_fields = if supports_pagination do
      pagination_fields = generate_pagination_config_fields(action)
      config_fields ++ pagination_fields
    else
      config_fields
    end

    # Add headers field (always optional)
    config_fields = config_fields ++ ["  headers?: Record<string, string>;"]

    config_type_def = "{\n#{Enum.join(config_fields, "\n")}\n}"

    # Generate result types and function signature
    {result_type_def, return_type_def, generic_param, function_signature} =
      cond do
        action.type == :destroy ->
          result_type = """
          | { success: true; data: {} }
          | {
              success: false;
              errors: Array<{
                type: string;
                message: string;
                field_path?: string;
                details: Record<string, string>;
              }>;
            }
          """

          result_type_def = "export type #{rpc_action_name_pascal}Result = #{result_type};"

          {result_type_def, "#{rpc_action_name_pascal}Result", "", "config: #{config_type_def}"}

        has_fields ->
          # Actions with field selection (CRUD + field-selectable generic actions)
          result_type = """
          | { success: true; data: Infer#{rpc_action_name_pascal}Result<Fields> }
          | {
              success: false;
              errors: Array<{
                type: string;
                message: string;
                field_path?: string;
                details: Record<string, string>;
              }>;
            }
          """

          result_type_def = "export type #{rpc_action_name_pascal}Result<#{fields_generic}> = #{result_type};"

          {result_type_def, "#{rpc_action_name_pascal}Result<Fields>", "#{fields_generic}", "config: #{config_type_def}"}

        true ->
          # Generic actions without field selection
          result_type = """
          | { success: true; data: Infer#{rpc_action_name_pascal}Result }
          | {
              success: false;
              errors: Array<{
                type: string;
                message: string;
                field_path?: string;
                details: Record<string, string>;
              }>;
            }
          """

          result_type_def = "export type #{rpc_action_name_pascal}Result = #{result_type};"

          {result_type_def, "#{rpc_action_name_pascal}Result", "", "config: #{config_type_def}"}
      end

    # Generate the complete function
    generic_part = if generic_param != "", do: "<#{generic_param}>", else: ""

    """
    #{result_type_def}

    export async function #{function_name}#{generic_part}(
      #{function_signature}
    ): Promise<#{return_type_def}> {
      const payload = build#{rpc_action_name_pascal}Payload(config);

      const headers: Record<string, string> = {
        "Content-Type": "application/json",
        ...config.headers,
      };

      const response = await fetch("#{endpoint_process}", {
        method: "POST",
        headers,
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        return {
          success: false,
          errors: [{ type: "network", message: response.statusText, details: {} }],
        };
      }

      const result = await response.json();
      return result as #{return_type_def};
    }
    """
  end

  defp generate_rpc_function(
         {resource, action, rpc_action},
         _resources_and_actions,
         endpoint_process,
         _endpoint_validate,
         _otp_app
       ) do
    # Convert Rpc action name to formatted function name using output_field_formatter
    rpc_action_name = to_string(rpc_action.name)

    # Generate separate input type
    input_type = generate_input_type(resource, action, rpc_action_name)

    # Generate result inference type with direct field generics
    result_type = generate_result_type(resource, action, rpc_action_name)

    # Generate payload builder with inline config objects
    payload_builder = generate_payload_builder(resource, rpc_action, action, rpc_action_name)

    # Generate RPC function with new pattern
    rpc_function =
      generate_rpc_execution_function(resource, action, rpc_action_name, endpoint_process)

    # Generate validation function (for create, update, destroy actions only)
    # TODO: Create a new validation function pattern for the new action pattern
    # For now, skip validation functions in the new pattern to avoid Config type references
    validation_function = ""

    functions_section =
      if validation_function == "" do
        rpc_function
      else
        """
        #{rpc_function}

        #{validation_function}
        """
      end

    """
    #{input_type}

    #{result_type}

    #{payload_builder}

    #{functions_section}
    """
  end
end
